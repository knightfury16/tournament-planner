// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TournamentPlanner.DataModeling;

#nullable disable

namespace TournamentPlanner.DataModeling.Migrations
{
    [DbContext(typeof(TournamentPlannerDataContext))]
    partial class TournamentPlannerDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MatchTypePlayer", b =>
                {
                    b.Property<int>("MatchTypesId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayersId")
                        .HasColumnType("integer");

                    b.HasKey("MatchTypesId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("MatchTypeParticipants", (string)null);
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.Property<int>("ParticipantsId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentsId")
                        .HasColumnType("integer");

                    b.HasKey("ParticipantsId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("TournamentParticipant", (string)null);
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("GameTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 7, 14, 23, 8, 421, DateTimeKind.Utc).AddTicks(8604),
                            Name = "TableTennis",
                            UpdatedAt = new DateTime(2024, 9, 7, 14, 23, 8, 421, DateTimeKind.Utc).AddTicks(8605)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 7, 14, 23, 8, 421, DateTimeKind.Utc).AddTicks(8610),
                            Name = "Chess",
                            UpdatedAt = new DateTime(2024, 9, 7, 14, 23, 8, 421, DateTimeKind.Utc).AddTicks(8610)
                        });
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("GamePlayed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("GameScheduled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRescheduled")
                        .HasColumnType("boolean");

                    b.Property<int>("MatchTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Player1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Player2Id")
                        .HasColumnType("integer");

                    b.Property<string>("RescheduleReason")
                        .HasColumnType("text");

                    b.Property<int?>("RescheduledById")
                        .HasColumnType("integer");

                    b.Property<object>("ScoreJson")
                        .HasColumnType("jsonb");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WinnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MatchTypeId");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.HasIndex("RescheduledById")
                        .IsUnique();

                    b.HasIndex("TournamentId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.MatchType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("MatchTypes");

                    b.HasDiscriminator<string>("MatchType").HasValue("MatchType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GamePlayed")
                        .HasColumnType("integer");

                    b.Property<int>("GameWon")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("KnockOutStartNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(16);

                    b.Property<int>("MaxParticipant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(104);

                    b.Property<int>("MinimumAgeOfRegistration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(18);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ParticipantResolutionStrategy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("StatBased");

                    b.Property<decimal>("RegistrationFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("RegistrationLastDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft");

                    b.Property<string>("TournamentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("GroupStage");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Venue")
                        .HasColumnType("text");

                    b.Property<int>("WinnerPerGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2);

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Group", b =>
                {
                    b.HasBaseType("TournamentPlanner.Domain.Entities.MatchType");

                    b.HasDiscriminator().HasValue("Group");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.KnockOut", b =>
                {
                    b.HasBaseType("TournamentPlanner.Domain.Entities.MatchType");

                    b.HasDiscriminator().HasValue("Knockout");
                });

            modelBuilder.Entity("MatchTypePlayer", b =>
                {
                    b.HasOne("TournamentPlanner.Domain.Entities.MatchType", null)
                        .WithMany()
                        .HasForeignKey("MatchTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentPlanner.Domain.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.HasOne("TournamentPlanner.Domain.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentPlanner.Domain.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Match", b =>
                {
                    b.HasOne("TournamentPlanner.Domain.Entities.MatchType", "MatchType")
                        .WithMany("Matches")
                        .HasForeignKey("MatchTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentPlanner.Domain.Entities.Player", "FirstPlayer")
                        .WithMany()
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentPlanner.Domain.Entities.Player", "SecondPlayer")
                        .WithMany()
                        .HasForeignKey("Player2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentPlanner.Domain.Entities.Admin", "RescheduledBy")
                        .WithOne()
                        .HasForeignKey("TournamentPlanner.Domain.Entities.Match", "RescheduledById");

                    b.HasOne("TournamentPlanner.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentPlanner.Domain.Entities.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("FirstPlayer");

                    b.Navigation("MatchType");

                    b.Navigation("RescheduledBy");

                    b.Navigation("SecondPlayer");

                    b.Navigation("Tournament");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.MatchType", b =>
                {
                    b.HasOne("TournamentPlanner.Domain.Entities.Tournament", "Tournament")
                        .WithMany("MatchTypes")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Tournament", b =>
                {
                    b.HasOne("TournamentPlanner.Domain.Entities.Admin", "CreatedBy")
                        .WithMany("CreatedTournament")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentPlanner.Domain.Entities.GameType", "GameType")
                        .WithMany("Tournaments")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("GameType");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Admin", b =>
                {
                    b.Navigation("CreatedTournament");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.GameType", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.MatchType", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Tournament", b =>
                {
                    b.Navigation("MatchTypes");

                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
