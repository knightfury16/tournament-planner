// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TournamentPlanner.Infrastructure.DataContext;

#nullable disable

namespace TournamentPlanner.Infrastructure.Migrations
{
    [DbContext(typeof(TournamentPlannerDataContext))]
    [Migration("20240730162840_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.Property<int>("ParticipantsId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentParticipatedId")
                        .HasColumnType("integer");

                    b.HasKey("ParticipantsId", "TournamentParticipatedId");

                    b.HasIndex("TournamentParticipatedId");

                    b.ToTable("PlayerTournament");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasAnnotation("RegularExpression", "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.GameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.KnockOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("KnockOuts");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FirstPlayerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("GamePlayed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("GameScheduled")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRescheduled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("KnockOutId")
                        .HasColumnType("integer");

                    b.Property<string>("RescheduleReason")
                        .HasColumnType("text");

                    b.Property<int?>("RescheduledById")
                        .HasColumnType("integer");

                    b.Property<int?>("ScoreId")
                        .HasColumnType("integer");

                    b.Property<int>("SecondPlayerId")
                        .HasColumnType("integer");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("WinnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FirstPlayerId");

                    b.HasIndex("GroupId");

                    b.HasIndex("KnockOutId");

                    b.HasIndex("RescheduledById");

                    b.HasIndex("ScoreId");

                    b.HasIndex("SecondPlayerId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("RegularExpression", "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$");

                    b.Property<int>("GamePlayed")
                        .HasColumnType("integer");

                    b.Property<int>("GameWon")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("KnockOutId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("KnockOutId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScoreType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Scores");

                    b.HasDiscriminator<string>("ScoreType").HasValue("Score");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("KnockOutStartNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(16);

                    b.Property<int>("MaxParticipant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(104);

                    b.Property<int>("MinimumAgeOfRegistration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(18);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ParticipantResolutionStrategy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("StatBased");

                    b.Property<decimal>("RegistrationFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("RegistrationLastDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft");

                    b.Property<string>("TournamentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("GroupStage");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Venue")
                        .HasColumnType("text");

                    b.Property<int>("WinnerPerGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2);

                    b.HasKey("Id");

                    b.HasIndex("GameTypeId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.GameTypesSupported.TableTennis.TableTennisScore", b =>
                {
                    b.HasBaseType("TournamentPlanner.Domain.Entities.Score");

                    b.Property<int>("Player1Sets")
                        .HasColumnType("integer");

                    b.Property<int>("Player2Sets")
                        .HasColumnType("integer");

                    b.Property<List<ValueTuple<int, int>>>("SetScores")
                        .IsRequired()
                        .HasColumnType("record[]");

                    b.HasDiscriminator().HasValue("TableTennis");
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.HasOne("TournamentPlanner.Domain.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentPlanner.Domain.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentParticipatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.GameType", b =>
                {
                    b.HasOne("TournamentPlanner.Domain.Entities.Admin", null)
                        .WithMany("InterestedGameTypes")
                        .HasForeignKey("AdminId");

                    b.HasOne("TournamentPlanner.Domain.Entities.Player", null)
                        .WithMany("InterestedGameTypes")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Group", b =>
                {
                    b.HasOne("TournamentPlanner.Domain.Entities.Tournament", null)
                        .WithMany("Groups")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.KnockOut", b =>
                {
                    b.HasOne("TournamentPlanner.Domain.Entities.Tournament", null)
                        .WithMany("KnockOuts")
                        .HasForeignKey("TournamentId");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Match", b =>
                {
                    b.HasOne("TournamentPlanner.Domain.Entities.Player", "FirstPlayer")
                        .WithMany()
                        .HasForeignKey("FirstPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentPlanner.Domain.Entities.Group", null)
                        .WithMany("Matches")
                        .HasForeignKey("GroupId");

                    b.HasOne("TournamentPlanner.Domain.Entities.KnockOut", null)
                        .WithMany("Matches")
                        .HasForeignKey("KnockOutId");

                    b.HasOne("TournamentPlanner.Domain.Entities.Admin", "RescheduledBy")
                        .WithMany()
                        .HasForeignKey("RescheduledById");

                    b.HasOne("TournamentPlanner.Domain.Entities.Score", "Score")
                        .WithMany()
                        .HasForeignKey("ScoreId");

                    b.HasOne("TournamentPlanner.Domain.Entities.Player", "SecondPlayer")
                        .WithMany()
                        .HasForeignKey("SecondPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TournamentPlanner.Domain.Entities.Tournament", null)
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId");

                    b.HasOne("TournamentPlanner.Domain.Entities.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("FirstPlayer");

                    b.Navigation("RescheduledBy");

                    b.Navigation("Score");

                    b.Navigation("SecondPlayer");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Player", b =>
                {
                    b.HasOne("TournamentPlanner.Domain.Entities.Group", null)
                        .WithMany("Players")
                        .HasForeignKey("GroupId");

                    b.HasOne("TournamentPlanner.Domain.Entities.KnockOut", null)
                        .WithMany("Players")
                        .HasForeignKey("KnockOutId");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Tournament", b =>
                {
                    b.HasOne("TournamentPlanner.Domain.Entities.GameType", "GameType")
                        .WithMany()
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameType");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Admin", b =>
                {
                    b.Navigation("InterestedGameTypes");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Group", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.KnockOut", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Player", b =>
                {
                    b.Navigation("InterestedGameTypes");
                });

            modelBuilder.Entity("TournamentPlanner.Domain.Entities.Tournament", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("KnockOuts");

                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
